paste(round(m_ldl_age_summary$coefficients[2,1],3),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3),')')
# Estimate (95% CI)
paste0(round(m_ldl_age_summary$coefficients[2,1],3),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3),')')
m_ldl_age_summary$coefficients[2,2]
m_ldl_age_summary
# Estimate (95% CI)
paste0(round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],3),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],3),')')
# Estimate (95% CI)
paste0(round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],4),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],4),')')
# Estimate (95% CI)
paste0('Estimate (95% CI)',
round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],4),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],4),')')
# Estimate (95% CI)
paste0('Estimate (95% CI): ',
round(m_ldl_age_summary$coefficients[2,1],4),' (',
round(m_ldl_age_summary$coefficients[2,1]-1.96*m_ldl_age_summary$coefficients[2,2],4),', ',
round(m_ldl_age_summary$coefficients[2,1]+1.96*m_ldl_age_summary$coefficients[2,2],4),')')
library(grid)
library(viridisLite)
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
MAX = 100
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
MAX = 100
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-30,(MAX)),yscale=c(-30,(MAX))))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
MAX = 100
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,3,3),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(5,5,3,3),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-30,100),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-30,100,20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-30,100,20)),gp=gpar(fontsize=8))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.30,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-30,100,20)),gp=gpar(fontsize=8))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
grid.text('QALYs from EQ5D-5L',y=unit(-2.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-2.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
matrixagecolour = rep(seq(1,ncol(MODELLED),1),times = ncol(MODELLED))
data = data.frame(vas = runif(n = 100,min=0,max = 100),
eq5d= runif(n = 100,min=-0.2,max = 1),
stage = sample(x=1:4,size = 100,replace = TRUE))
data
grid.points(x = data$eq5d,y = data$vas,default.units = 'native',pch = data$stage+13,size = unit(0.5,'char'),
gp = gpar(col = data$stage,fill=data$stage))
viridis(n = 5)
cols = viridis(n = 5)
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+13,size = unit(0.5,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
# if(MAX^(1/SCALE) < 0.8) grid.xaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
# if(MAX^(1/SCALE) < 0.8) grid.yaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+14,size = unit(0.5,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
# if(MAX^(1/SCALE) < 0.8) grid.xaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
# if(MAX^(1/SCALE) < 0.8) grid.yaxis(at = c(seq(0,0.6,0.1))^SCALE, label = seq(0,0.6,0.1),gp=gpar(fontsize=6))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+14,size = unit(0.75,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
ypos = seq(0.05,0.7,length.out = 16)
allages = paste0(seq(0,75,5),'-',seq(4,79,5))
if(length(agelabellist[[ISO]])==1) agegp = allages
if(length(agelabellist[[ISO]])>1) agegp = agelabellist[[ISO]]
yvalues = ypos[1:ncol(MODELLED)]
ypos
grid.polygon(x = c(0.79,0.99,0.99,0.79),y = c(max(yvalues)+0.03,max(yvalues)+0.03,0.02,0.02),default.units = 'npc',gp=gpar(fill='grey90',col=NA))
grid.polygon(x = c(0.05,0.35,0.35,0.05),y = c(0.80,0.80,0.95,0.95),default.units = 'npc',gp=gpar(fill='grey90',col=NA))
ypos
ypos = seq(0.80,0.95,length.out = 4)
ypos = seq(0.82,0.92,length.out = 4)
ypos
ypos = seq(0.83,0.92,length.out = 4)
ypos
grid.points(x = unit(rep(0.08,4),'npc'),
y = unit(ypos,'npc'),
size = unit(.75, "char"),
pch=15:18,
gp=gpar(col=cols[1:4],fill=cols[1:4],alpha = 1))
grid.text(label = c('Stage I','Stage II','Stage III','Stage IV'),
(x = unit(rep(0.09,4),'npc'),
grid.text(label = c('Stage I','Stage II','Stage III','Stage IV'),
x = unit(rep(0.09,4),'npc'),
y = unit(ypos,'npc'),
just = 'left',gp=gpar(fontsize = 8))
# plotCorrelation = function(ISO,INDEX='',EMPIRICAL,MODELLED,XAXISNAME = 'Empirical contact survey',YAXISNAME = 'Synthetic 2020',SCALE){
grid.newpage()
pushViewport(plotViewport(c(3,3,1,1),xscale=c(-0.3,1),yscale=c(-30,100)))
grid.rect()
grid.xaxis(at = c(seq(-0.20,1,0.20)),gp=gpar(fontsize=8))
grid.yaxis(at = c(seq(-20,100,20)),gp=gpar(fontsize=8))
grid.text('QALYs from EQ5D-5L',y=unit(-3.1,'lines'),gp=gpar(fontsize=8,fontface = 'bold'))
grid.text('QALYs from VAS',x=unit(-3.4,'lines'),rot=90,gp=gpar(fontsize=8,fontface='bold'))
grid.points(x = data$eq5d,
y = data$vas,
default.units = 'native',pch = data$stage+14,size = unit(0.75,'char'),
gp = gpar(col = cols[data$stage],fill= cols[data$stage]))
ypos = seq(0.83,0.92,length.out = 4)
allages = paste0(seq(0,75,5),'-',seq(4,79,5))
yvalues = ypos[1:ncol(MODELLED)]
grid.polygon(x = c(0.05,0.15,0.15,0.05),y = c(0.80,0.80,0.95,0.95),default.units = 'npc',gp=gpar(fill='grey90',col=NA))
grid.points(x = unit(rep(0.08,4),'npc'),
y = unit(ypos,'npc'),
size = unit(.75, "char"),
pch=15:18,
gp=gpar(col=cols[1:4],fill=cols[1:4],alpha = 1))
grid.text(label = c('Stage I','Stage II','Stage III','Stage IV'),
x = unit(rep(0.09,4),'npc'),
y = unit(ypos,'npc'),
just = 'left',gp=gpar(fontsize = 8))
grid.rect(gp=gpar(col='black',fill=NA))
popViewport()
# After successful installation, load the readxl package
library(readxl)
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# Describe your data: Quick look at the data
head(chp)
str(chp)
summary(chp)
View(chp)
View(chp)
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# ++++++++ In-class exercise 1 ++++++++ #
# Summarize the data for the following continuous variables:
# (i) Age
# (ii) BMI
# Do you observe any missing/erroneous values?
summary(chp$ldl)
quantile(chp$ldl)
quantile(chp$ldl,na.rm = TRUE)
# (i) Data cleaning for continuous variable: Age
chp$age_drop = chp$age
chp$age_drop[chp$age_drop<40 | chp$age_drop>100]
chp$age_drop[chp$age_drop<40 | chp$age_drop>100] = NA
summary(chp$age_drop)
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop>50]
chp$bmi_drop[chp$bmi_drop>50] = NA
a
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# Describe your data: Quick look at the data
head(chp)
str(chp)
summary(chp)
# Describe your data: character variables
table(chp$gender, useNA = 'ifany')
table(chp$ethnicity, useNA = 'ifany')
table(chp$smoke, useNA = 'ifany')
# LDL
summary(chp$ldl)
quantile(chp$ldl)
quantile(chp$ldl,na.rm = TRUE)
# Checking the distribution of the variable (using histogram)
hist(chp$ldl,breaks = 100,xlab="LDL Cholesterol (mmol/L)", main="Histogram of LDL Cholesterol")
# Checking for outliers (using box plot)
boxplot(chp$ldl,ylab="LDL Cholesterol (mmol/L)", main="Boxplot of LDL Cholesterol",col = 'grey')
# (i) Age
summary(chp$age)
quantile(chp$age,na.rm = TRUE)
# Checking the distribution of the variable (using histogram)
hist(chp$age,breaks = 100,xlab="Age (in years)", main="Histogram of Age")
# Checking for outliers (using box plot)
boxplot(chp$age,ylab="Age (in years)", main="Boxplot of Age",col = 'grey')
# (ii) BMI
summary(chp$bmi)
quantile(chp$bmi,na.rm = TRUE)
# Checking the distribution of the variable (using histogram)
hist(chp$bmi,breaks = 100,xlab="BMI", main="Histogram of BMI")
# Data cleaning for categorical variable: Gender
table(chp$gender, useNA = 'ifany')
chp$gender[chp$gender %in% "male"]
chp$gender[chp$gender %in% "male"] = "Male"
chp$gender[chp$gender %in% "q"]
chp$gender[chp$gender %in% "q"] = NA
table(chp$gender, useNA = 'ifany')
# Data cleaning for categorical variable: Gender
table(chp$gender, useNA = 'ifany')
chp$gender[chp$gender %in% "male"]
chp$gender[chp$gender %in% "male"] = "Male"
chp$gender[chp$gender %in% "q"]
chp$gender[chp$gender %in% "q"] = NA
table(chp$gender, useNA = 'ifany')
table(chp$gender, useNA = 'ifany')
chp$female = NA
table(chp$female, useNA = 'ifany')
chp$female[chp$gender %in% "Female"] = 1
# Data cleaning for continuous variable: LDL Cholesterol
chp$ldl_drop = chp$ldl
chp$ldl_drop[chp$ldl_drop<1 | chp$ldl_drop>10]
# Data cleaning for continuous variable: LDL Cholesterol
chp$ldl_drop = chp$ldl
chp$ldl_drop[chp$ldl_drop<1 | chp$ldl_drop>10]
chp$ldl_drop[chp$ldl_drop<1 | chp$ldl_drop>10] = NA
summary(chp$ldl_drop)
summary(chp$age_drop)
# (i) Data cleaning for continuous variable: Age
chp$age_drop = chp$age
chp$age_drop[chp$age_drop<40 | chp$age_drop>100]
chp$age_drop[chp$age_drop<40 | chp$age_drop>100] = NA
summary(chp$age_drop)
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop<50 ]
chp$bmi_drop[chp$bmi_drop<50 ] = NA
summary(chp$bmi_drop)
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop<50 ]
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop<50 ]
chp$bmi_drop[chp$bmi_drop<50 ] = NA
summary(chp$bmi_drop)
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop>50 ]
chp$bmi_drop[chp$bmi_drop>50 ] = NA
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop>50]
chp$bmi_drop[chp$bmi_drop>50] = NA
summary(chp$bmi_drop)
# (ii) Ethnicity
table(chp$ethnicity, useNA = 'ifany')
chp$ethnicity[chp$ethnicity %in% "chinese"]
chp$ethnicity[chp$ethnicity %in% "chinese"] = "Chinese"
table(chp$gender, useNA = 'ifany')
chp$gender[chp$gender %in% "male"]
chp$gender[chp$gender %in% "male"] = "Male"
chp$gender[chp$gender %in% "q"]
chp$gender[chp$gender %in% "q"] = NA
table(chp$gender, useNA = 'ifany')
View(chp)
# (i) Smoking status
table(chp$smoke, useNA = 'ifany')
chp$smoke[chp$smoke %in% "zsmoker"]
chp$smoke[chp$smoke %in% "zsmoker"] = NA
ch(chp$smoke, useNA = "ifany")
# (i) Smoking status
table(chp$smoke, useNA = 'ifany')
chp$smoke[chp$smoke %in% "zsmoker"]
chp$smoke[chp$smoke %in% "zsmoker"] = NA
ch(chp$smoke, useNA = "ifany")
table(chp$smoke, useNA = "ifany")
# (ii) Ethnicity
table(chp$ethnicity, useNA = 'ifany')
table(chp$gender, useNA = 'ifany')
chp$female = NA
table(chp$female, useNA = 'ifany')
chp$female[chp$gender %in% "Female"] = 1
chp$female[chp$gender %in% "Male"] = 0
table(chp$female, useNA = 'ifany')
class(chp$smoke)
table(chp$smoke, useNA = 'ifany')
chp$smoke1 = NA
table(chp$smoke1, useNA = 'ifany')
chp$smoke1[chp$smoke %in% "Daily smoker"] = 1
chp$smoke1[chp$smoke %in% "Ex-smoker"] = 2
chp$smoke1[chp$smoke %in% "Never-Smoker"] = 3
chp$smoke1[chp$smoke %in% "Occasional smoker"] = 4
table(chp$smoke1, useNA = 'ifany')
chp$smoker = NA
table(chp$smoker, useNA = 'ifany')
chp$smoker[chp$smoke %in% "Daily smoker"] = 1
chp$smoker[chp$smoke %in% "Occasional smoker"] = 1
chp$smoker[chp$smoke %in% "Ex-smoker"] = 0
chp$smoker[chp$smoke %in% "Never-Smoker"] = 0
table(chp$smoker, useNA = 'ifany')
chp$smoker = NA
table(chp$smoker, useNA = 'ifany')
chp$smoker[chp$smoke %in% "Daily smoker"] = 1
chp$smoker[chp$smoke %in% "Occasional smoker"] = 1
chp$smoker[chp$smoke %in% "Ex-smoker"] = 0
chp$smoker[chp$smoke %in% "Never-Smoker"] = 0
table(chp$smoker, useNA = 'ifany')
table(chp$smoke,chp$smoker,useNA = 'ifany')
chp$overweight = NA
chp$overweight = NA
table(chp$overweight, useNA = 'ifany')
chp$overweight[chp$bmi_drop < 25] = 0
chp$overweight[chp$bmi_drop >= 25] = 1
#verify the range
summary(chp$bmi_drop)
summary(chp$bmi_drop[chp$overweight %in% 0])
summary(chp$bmi_drop[chp$overweight %in% 1])
# Store this file as “chp_processed_data”
chp_processed_data = chp
View(chp_processed_data)
summary(chp$bmi_drop[chp$overweight %in% 'Fema'])
summary(chp$bmi_drop[chp$cvd %in% 0])
summary(chp$bmi_drop[chp$cvd %in% 1])
# Store this file as “chp_processed_data”
chp_processed_data = chp
# Identify the rows with missing and/or erroneous data using the "which" function
problemrows = which(is.na(chp$age_drop) | is.na(chp$gender) | is.na(chp$bmi_drop) | is.na(chp$ethnicity) | is.na(chp$smoke) | is.na(chp$cvd) | is.na(chp$ldl_drop))
chp[problemrows,]
# Delete the rows with missing and/or erroneous data
chp = chp[-problemrows,]
# delete this variable as it is no longer needed
rm(problemrows)
# Save cleaned data: as Excel csv file (easy to open this file in MS Excel)
write.csv(chp,file ='data/chp_cleaned.csv',row.names = FALSE)
# Save cleaned data: as R data file (easy to load this file into R for further analysis)
save(chp,file = 'data/chp_cleaned.rdata')
# Save cleaned data: as RDS file (easy to load this file into R for further analysis)
saveRDS(chp,file = 'data/chp_cleaned.rds')
chp_processed_data
# Store this file as “chp_processed_data”
chp_processed_data = chp
# Identify the rows with missing and/or erroneous data using the "which" function
problemrows = which(is.na(chp$age_drop) | is.na(chp$gender) | is.na(chp$bmi_drop) | is.na(chp$ethnicity) | is.na(chp$smoke) | is.na(chp$cvd) | is.na(chp$ldl_drop))
chp[problemrows,]
chp = chp_processed_data
# Identify the rows with missing and/or erroneouns data using the "which" function
# Identify the rows with missing and/or erroneous data using the "which" function
problemrows = which(is.na(chp$age_drop) | is.na(chp$gender) | is.na(chp$bmi_drop) | is.na(chp$ethnicity) | is.na(chp$smoke) | is.na(chp$cvd) | is.na(chp$ldl_drop))
chp[problemrows,]
# Delete the rows with missing and/or erroneous data
chp = chp[-problemrows,]
# delete this variable as it is no longer needed
rm(problemrows)
# Save cleaned data: as Excel csv file (easy to open this file in MS Excel)
write.csv(chp,file ='data/chp_cleaned.csv',row.names = FALSE)
# Save cleaned data: as R data file (easy to load this file into R for further analysis)
save(chp,file = 'data/chp_cleaned.rdata')
# Save cleaned data: as RDS file (easy to load this file into R for further analysis)
saveRDS(chp,file = 'data/chp_cleaned.rds')
# After successful installation, load the readxl package
library(readxl)
############# Understand your data #############
## Import data into R
# Because the file is an .xls file, you will need the read_xls function in the readxl package (which you will first need to install).
# Install the readxl package
install.packages("readxl") # you will need internet for this
# After successful installation, load the readxl package
library(readxl)
install.packages("readxl")
View(chp)
View(chp)
chp = chp_processed_data
# After successful installation, load the readxl package
library(readxl)
# Load the data set "CHP data.xls" which is in the "data" folder in the working directory
chp = read_xls('data/CHP data.xls',	sheet = "Sheet1")
# Describe your data: Quick look at the data
head(chp)
str(chp)
summary(chp)
# Data cleaning for continuous variable: LDL Cholesterol
chp$ldl_drop = chp$ldl
chp$ldl_drop[chp$ldl_drop<1 | chp$ldl_drop>10]
chp$ldl_drop[chp$ldl_drop<1 | chp$ldl_drop>10] = NA
summary(chp$ldl_drop)
# (i) Data cleaning for continuous variable: Age
chp$age_drop = chp$age
chp$age_drop[chp$age_drop<40 | chp$age_drop>100]
chp$age_drop[chp$age_drop<40 | chp$age_drop>100] = NA
summary(chp$age_drop)
# (ii) Data cleaning for continuous variable: BMI
chp$bmi_drop = chp$bmi
chp$bmi_drop[chp$bmi_drop>50]
chp$bmi_drop[chp$bmi_drop>50] = NA
summary(chp$bmi_drop)
# Data cleaning for categorical variable: Gender
table(chp$gender, useNA = 'ifany')
chp$gender[chp$gender %in% "male"]
chp$gender[chp$gender %in% "male"] = "Male"
chp$gender[chp$gender %in% "q"]
chp$gender[chp$gender %in% "q"] = NA
table(chp$gender, useNA = 'ifany')
# (i) Smoking status
table(chp$smoke, useNA = 'ifany')
chp$smoke[chp$smoke %in% "zsmoker"]
chp$smoke[chp$smoke %in% "zsmoker"] = NA
table(chp$smoke, useNA = "ifany")
# (ii) Ethnicity
table(chp$ethnicity, useNA = 'ifany')
chp$ethnicity[chp$ethnicity %in% "chinese"]
chp$ethnicity[chp$ethnicity %in% "chinese"] = "Chinese"
table(chp$ethnicity, useNA = 'ifany')
table(chp$gender, useNA = 'ifany')
chp$female = NA
table(chp$female, useNA = 'ifany')
chp$female[chp$gender %in% "Female"] = 1
chp$female[chp$gender %in% "Male"] = 0
table(chp$female, useNA = 'ifany')
class(chp$smoke)
table(chp$smoke, useNA = 'ifany')
chp$smoke1 = NA
table(chp$smoke1, useNA = 'ifany')
chp$smoke1[chp$smoke %in% "Daily smoker"] = 1
chp$smoke1[chp$smoke %in% "Ex-smoker"] = 2
chp$smoke1[chp$smoke %in% "Never-Smoker"] = 3
chp$smoke1[chp$smoke %in% "Occasional smoker"] = 4
table(chp$smoke1, useNA = 'ifany')
chp$smoker = NA
table(chp$smoker, useNA = 'ifany')
chp$smoker[chp$smoke %in% "Daily smoker"] = 1
chp$smoker[chp$smoke %in% "Occasional smoker"] = 1
chp$smoker[chp$smoke %in% "Ex-smoker"] = 0
chp$smoker[chp$smoke %in% "Never-Smoker"] = 0
table(chp$smoker, useNA = 'ifany')
table(chp$smoke,chp$smoker,useNA = 'ifany')
chp$overweight = NA
table(chp$overweight, useNA = 'ifany')
chp$overweight[chp$bmi_drop < 25] = 0
chp$overweight[chp$bmi_drop >= 25] = 1
#verify the range
summary(chp$bmi_drop)
summary(chp$bmi_drop[chp$overweight %in% 0])
summary(chp$bmi_drop[chp$overweight %in% 1])
summary(chp$bmi_drop[chp$overweight %in% 'Male'])
summary(chp$bmi_drop[chp$overweight %in% 'Fema'])
summary(chp$bmi_drop[chp$cvd %in% 0])
summary(chp$bmi_drop[chp$cvd %in% 1])
# Store this file as “chp_processed_data”
chp_processed_data = chp
# Identify the rows with missing and/or erroneous data using the "which" function
problemrows = which(is.na(chp$age_drop) | is.na(chp$gender) | is.na(chp$bmi_drop) | is.na(chp$ethnicity) | is.na(chp$smoke) | is.na(chp$cvd) | is.na(chp$ldl_drop))
chp[problemrows,]
# Delete the rows with missing and/or erroneous data
chp = chp[-problemrows,]
# delete this variable as it is no longer needed
rm(problemrows)
# Save cleaned data: as Excel csv file (easy to open this file in MS Excel)
write.csv(chp,file ='data/chp_cleaned.csv',row.names = FALSE)
# Save cleaned data: as R data file (easy to load this file into R for further analysis)
save(chp,file = 'data/chp_cleaned.rdata')
# Save cleaned data: as RDS file (easy to load this file into R for further analysis)
saveRDS(chp,file = 'data/chp_cleaned.rds')
